pipeline {
    agent any

    parameters {
    string(name: 'PROJECT_ID', defaultValue: 'microservices-test-ps', description: 'GCP project ID')
    string(name: 'GKE_CLUSTER', defaultValue: '', description: 'Cluster name')
    string(name: 'REGION', defaultValue: '', description: 'Region where cluster is located')
    }

    environment {
    GIT_COMMITTER_NAME = "Jenkins CI"
    GIT_COMMITTER_EMAIL = "jenkins@example.com"
    }

    stages {
        stage('Clean Workspace') {
            steps {
                cleanWs()
            }
        }
        stage('Git Checkout') {
            steps {
                git branch: 'main', changelog: false, credentialsId: 'github-token', poll: false, url: 'https://github.com/fastest-man-alive/microservices-test.git'
            }
        }

        stage('Authenticate to GKE Cluster') {
            steps {
                sh '''
                    gcloud container clusters get-credentials $GKE_CLUSTER --region $REGION --project $PROJECT_ID
                '''
            }
        }

        stage('Get Cluster Details') {
            steps {
                sh '''
                    cd automation
                    python3 test.py $PROJECT_ID $GKE_CLUSTER $REGION
                '''
            }
        }

        stage('Push to github') {
            steps {
                withCredentials([gitUsernamePassword(credentialsId: 'github-user-pass', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_TOKEN')]) {
                    sh '''
                    git config user.name "$GIT_COMMITTER_NAME"
                    git config user.email "$GIT_COMMITTER_EMAIL"
                    git add .
                    git commit -m "Jenkins: added FW rule"
                    echo "$GIT_USER"
                    # Set remote with token auth for pushing
                    git remote set-url origin https://$GIT_USER:$GIT_TOKEN@github.com/fastest-man-alive/microservices-test.git

                    git push origin HEAD:main
                    '''
                }
            }
        }
        stage('Trigger Terraform Pipeline') {
            steps {
                build job: 'Terraform/gcp-deploy'
            }
        }
    }
}